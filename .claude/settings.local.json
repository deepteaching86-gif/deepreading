{
  "permissions": {
    "allow": [
      "Bash(where npx)",
      "Bash(npm install:*)",
      "Bash(npm run prisma:generate:*)",
      "Bash(npx prisma db push:*)",
      "Bash(curl:*)",
      "Bash(clip)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(node:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(exit 0)",
      "Bash(npm run dev:*)",
      "Bash(env)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(git remote set-url:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(npm run prisma:migrate:*)",
      "Bash(npm run seed:*)",
      "Bash(npm run prisma:seed:*)",
      "Bash(npm run build:*)",
      "Bash(vercel:*)",
      "Bash(timeout 30 bash -c 'while true; do sleep 5; done')",
      "Bash(npx vercel logs:*)",
      "Bash(npx ts-node:*)",
      "Bash(if [ -f netlify.toml ])",
      "Bash(then cat netlify.toml)",
      "Bash(else echo \"No netlify.toml in root\")",
      "Bash(fi)",
      "Bash(npx vercel:*)",
      "Bash(npm run:*)",
      "Bash(timeout 15 bash -c 'while true; do sleep 5; done')",
      "Read(//c/Users/owner/.config/**)",
      "Bash(tee:*)",
      "Bash(for i in {1..10})",
      "Bash(do sleep:*)",
      "Bash(done)",
      "Bash(for i in {1..15})",
      "Bash(netlify env:set:*)",
      "Bash(npx netlify env:set:*)",
      "Bash(npx netlify link:*)",
      "Bash(timeout 120 bash -c 'while true; do sleep 30; done')",
      "Bash(npx tsc:*)",
      "Bash(npx prisma:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025%21%40%23%24SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" npx prisma migrate dev --name add-peer-statistics)",
      "Bash(timeout 180 bash -c 'while true; do sleep 30; done')",
      "Read(//c/Users/owner/AppData/Roaming/Claude/**)",
      "Read(//c/Users/owner/.claude/**)",
      "Bash(claude mcp list:*)",
      "Bash(set SUPABASE_ACCESS_TOKEN=sbp_2582f48b9389cfb4b615d3a91c96a4b731015ffd)",
      "Bash(npx:*)",
      "Bash(cmd /c \"set SUPABASE_ACCESS_TOKEN=sbp_2582f48b9389cfb4b615d3a91c96a4b731015ffd && npx -y @supabase/mcp-server-supabase@latest --read-only --project-ref=sxnjeqqvqbhueqbwsnpj\")",
      "Bash(git checkout:*)",
      "Bash(git reset:*)",
      "Bash(set NETLIFY_SITE_ID=b1ce6181-d158-42e0-b07f-d19353e0fa70)",
      "Bash(dir:*)",
      "Bash(timeout:*)",
      "Bash(git rm:*)",
      "Bash(findstr:*)",
      "Bash(del /F frontendsrcnul)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025%21%40%23%24SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" npx prisma migrate deploy)",
      "Bash(netstat:*)",
      "Bash(taskkill:*)",
      "Bash(cmd /c:*)",
      "Bash(find:*)",
      "Read(//c/Users/owner/Downloads/**)",
      "Bash(copy:*)",
      "Bash(set:*)",
      "Read(//c/**)",
      "Bash(for i in {1..5})",
      "Bash(do echo \"Attempt $i...\")",
      "Bash(break)",
      "Bash(del /F backendnul)",
      "Bash(PGPASSWORD='DeepReading2025!@#$SecureDB' psql:*)",
      "Bash(if exist dist rd /s /q dist)",
      "Bash(xcopy:*)",
      "Bash(del /F nul)",
      "Bash(if [ -f .netlify/state.json ])",
      "Bash(then cat .netlify/state.json)",
      "Bash(else echo \"No Netlify state found\")",
      "Bash(for i in {1..6})",
      "Bash(do echo \"⏳ 대기 중... $i0초\")",
      "Bash(do echo \"⏳ Netlify 배포 대기 중... $i0초\")",
      "Bash(pip install SuperClaude)",
      "Bash(python:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025!@#$SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" npx prisma db push:*)",
      "Bash(pip install:*)",
      "Bash(do echo \"⏳ 대기 중... $i초\")",
      "Bash(do echo \"⏳ 서버 시작 대기 중... $i초\")",
      "Bash(for i in {1..3})",
      "Bash(do echo \"⏳ 리로드 대기 중... $i초\")",
      "Bash(start http://localhost:8000/docs)",
      "Bash(do echo \"⏳ 서버 리로드 대기 중... $i초\")",
      "Bash(if exist app__pycache__ rd /s /q app__pycache__)",
      "Bash(if exist appenglish_test__pycache__ rd /s /q appenglish_test__pycache__)",
      "Bash(do echo \"⏳ 프론트엔드 시작 대기 중... $i초\")",
      "Bash(start http://localhost:5173)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025!@#$SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" psql -c \"SELECT COUNT(*) as total_items, domain, COUNT(*) as count FROM items GROUP BY domain ORDER BY domain;\")",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(ipconfig:*)",
      "Bash(for i in {1..2})",
      "Bash(do echo \"⏳ 종료 대기... $i초\")",
      "Bash(if exist frontendnode_modules.vite rd /s /q frontendnode_modules.vite)",
      "Bash(do echo \"⏳ 백엔드 (포트 3000) 시작 대기 중... $i초\")",
      "Bash(start:*)",
      "Bash(do echo \"⏳ HTTP 서버 시작 대기 중... $i초\")",
      "Bash(do echo \"⏳ 백엔드 리로드 대기 중... $i초\")",
      "Bash(rd /s /q .netlify)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025%21%40%23%24SecureDB@aws-1-ap-northeast-2.pooler.supabase.com:6543/postgres\" psql:*)",
      "Bash(if [ -f .env ])",
      "Bash(then cat .env)",
      "Bash(else echo \"No .env file exists\")",
      "Bash(powershell -Command \"Stop-Process -Id 41168 -Force\")",
      "Bash(powershell -Command:*)",
      "Bash(do echo \"⏳ 백엔드 (포트 8000) 시작 대기 중... $i초\")",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025!@#$SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" psql:*)",
      "Bash(do echo \"⏳ 서버 리로드 대기... $i초\")",
      "Bash(do echo \"대기 중... $i0초\" sleep 10 if [ $i -eq 6 ])",
      "Bash(then echo \"중간 체크: 배포 상태 확인 중...\" curl -s https://literacy-backend.onrender.com/health)",
      "Bash(DATABASE_URL=\"postgresql://postgres.sxnjeqqvqbhueqbwsnpj:DeepReading2025!@#$SecureDB@db.sxnjeqqvqbhueqbwsnpj.supabase.co:5432/postgres\" python:*)",
      "Bash(do echo \"대기 중... $i0초\")",
      "Bash(if [ $i -eq 6 ])",
      "Bash(then echo \"중간 체크: 배포 상태 확인 중...\")",
      "Bash(do echo \"  대기 중... $i0초\")",
      "Bash(do echo \"⏳ Render 배포 대기 중... $i0초\")",
      "Bash(if [ $i -eq 3 ])",
      "Bash(then curl -s https://literacy-backend.onrender.com/health)"
    ],
    "deny": [],
    "ask": []
  }
}

// Prisma Schema for Literacy Assessment System (Based on PRD)
// Database: PostgreSQL (Supabase)
// Version: 2.0 - Aligned with PRD Requirements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== User Management =====

enum UserRole {
  student
  teacher
  parent
  admin
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  role         UserRole
  name         String    @db.VarChar(100)
  phone        String?   @db.VarChar(20)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  student  Student?
  asParent Student[] @relation("ParentToStudent")
  asTeacher Student[] @relation("TeacherToStudent")
  visionCalibrations VisionCalibration[]
  visionAdjustments VisionCalibrationAdjustment[]

  @@map("users")
}

model Student {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @unique @map("user_id") @db.Uuid
  studentCode String?   @unique @map("student_code") @db.VarChar(50)
  grade       Int       @db.Integer // 1-9 (초1~중3)
  schoolName  String?   @map("school_name") @db.VarChar(200)
  className   String?   @map("class_name") @db.VarChar(50)
  birthDate   DateTime? @map("birth_date") @db.Date
  parentPhone String?   @map("parent_phone") @db.VarChar(20)
  parentId    String?   @map("parent_id") @db.Uuid
  teacherId   String?   @map("teacher_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   User?         @relation("ParentToStudent", fields: [parentId], references: [id])
  teacher  User?         @relation("TeacherToStudent", fields: [teacherId], references: [id])
  sessions TestSession[]

  @@index([userId])
  @@index([grade])
  @@index([grade, teacherId])
  @@map("students")
}

// ===== Test Templates & Questions =====

enum QuestionCategory {
  vocabulary          // 어휘력
  reading             // 독해력
  grammar             // 문법/어법
  reasoning           // 추론/사고력
  reading_motivation  // 읽기 동기
  writing_motivation  // 글쓰기 동기
  reading_environment // 독서 환경
  reading_habit       // 독서 습관
  reading_preference  // 선호 장르
  digital_literacy    // 디지털 리터러시
  critical_thinking   // 비판적 사고
  reading_attitude    // 독서 태도
}

enum QuestionType {
  choice        // 선택형
  short_answer  // 단답형
  essay         // 서술형
  likert_scale  // 리커트 척도 (1-5점)
}

enum Difficulty {
  easy
  medium
  hard
}

model TestTemplate {
  id             String    @id @default(uuid()) @db.Uuid
  templateCode   String    @unique @map("template_code") @db.VarChar(50)
  grade          Int       @db.Integer // 대상 학년 (1-9)
  title          String    @db.VarChar(200)
  description    String?   @db.Text
  version        String    @default("1.0") @db.VarChar(10)
  totalQuestions Int       @map("total_questions") @db.Integer
  totalPoints    Int       @default(100) @map("total_points") @db.Integer
  passingScore   Int       @default(60) @map("passing_score") @db.Integer
  timeLimit      Int?      @map("time_limit") @db.Integer // 분 단위
  status         String    @default("active") @db.VarChar(20)
  isActive       Boolean   @default(true) @map("is_active")

  // Vision TEST 확장
  templateType   String    @default("standard") @map("template_type") @db.VarChar(20) // "standard" | "vision"
  visionConfig   Json?     @map("vision_config") @db.JsonB // Vision 템플릿 설정

  createdAt      DateTime  @default(now()) @map("created_at")

  // Relations
  questions  Question[]
  sessions   TestSession[]
  statistics Statistic[]

  @@index([templateType])
  @@map("test_templates")
}

model Question {
  id             String           @id @default(uuid()) @db.Uuid
  templateId     String           @map("template_id") @db.Uuid
  questionNumber Int              @map("question_number") @db.Integer
  category       QuestionCategory
  questionType   QuestionType     @map("question_type")
  questionText   String           @map("question_text") @db.Text
  passage        String?          @db.Text // 지문 (독해 문항용)
  imageUrl       String?          @map("image_url") @db.VarChar(500) // 문제 이미지 URL
  options        Json?            @db.JsonB // 선택지 [{id: 1, text: "..."}, ...]
  correctAnswer  String           @map("correct_answer") @db.Text
  points         Int              @default(1) @db.Integer
  difficulty     Difficulty?
  explanation    String?          @db.Text

  // Relations
  template        TestTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  answers         Answer[]
  surveyResponses SurveyResponse[]

  @@unique([templateId, questionNumber])
  @@index([templateId])
  @@index([category])
  @@map("questions")
}

// ===== Test Sessions & Answers =====

enum SessionStatus {
  pending     // 대기 중
  in_progress // 진행 중
  completed   // 완료 (채점 전)
  scored      // 채점 완료
}

model TestSession {
  id                  String        @id @default(uuid()) @db.Uuid
  sessionCode         String        @unique @map("session_code") @db.VarChar(50)
  studentId           String        @map("student_id") @db.Uuid
  templateId          String        @map("template_id") @db.Uuid
  status              SessionStatus @default(pending)
  surveyCompletedAt   DateTime?     @map("survey_completed_at") // 설문 완료 시간
  startedAt           DateTime?     @map("started_at") // 실제 테스트 시작 시간
  completedAt         DateTime?     @map("completed_at")
  scoredAt            DateTime?     @map("scored_at")
  createdAt           DateTime      @default(now()) @map("created_at")

  // Relations
  student         Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  template        TestTemplate      @relation(fields: [templateId], references: [id])
  answers         Answer[]
  result          TestResult?
  surveyResponses SurveyResponse[]
  visionSession   VisionTestSession?

  @@index([studentId])
  @@index([sessionCode])
  @@index([status])
  @@index([studentId, status])
  @@map("test_sessions")
}

model Answer {
  id             String   @id @default(uuid()) @db.Uuid
  sessionId      String   @map("session_id") @db.Uuid
  questionId     String   @map("question_id") @db.Uuid
  questionNumber Int      @map("question_number") @db.Integer
  studentAnswer  String?  @map("student_answer") @db.Text
  isCorrect      Boolean? @map("is_correct")
  pointsEarned   Int      @default(0) @map("points_earned") @db.Integer
  feedback       String?  @db.Text // AI-generated feedback for essays
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  session  TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id])

  @@index([sessionId])
  @@map("answers")
}

// ===== Survey Responses (설문 응답) =====

model SurveyResponse {
  id             String   @id @default(uuid()) @db.Uuid
  sessionId      String   @map("session_id") @db.Uuid
  questionId     String   @map("question_id") @db.Uuid
  questionNumber Int      @map("question_number") @db.Integer
  response       String   @db.Text // 응답 값 (숫자 또는 텍스트)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  session  TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id])

  @@index([sessionId])
  @@map("survey_responses")
}

// ===== Test Results =====

model TestResult {
  id                     String   @id @default(uuid()) @db.Uuid
  sessionId              String   @unique @map("session_id") @db.Uuid
  totalScore             Int      @map("total_score") @db.Integer
  totalPossible          Int      @map("total_possible") @db.Integer
  percentage             Decimal  @db.Decimal(5, 2)
  gradeLevel             Int?     @map("grade_level") @db.Integer // 1-9 등급
  correctAnswers         Int      @default(0) @map("correct_answers") @db.Integer
  incorrectAnswers       Int      @default(0) @map("incorrect_answers") @db.Integer
  percentile             Decimal? @db.Decimal(5, 2)
  vocabularyScore        Int?     @map("vocabulary_score") @db.Integer
  readingScore           Int?     @map("reading_score") @db.Integer
  grammarScore           Int?     @map("grammar_score") @db.Integer
  reasoningScore         Int?     @map("reasoning_score") @db.Integer
  // 설문 점수 추가
  readingMotivationScore Decimal? @map("reading_motivation_score") @db.Decimal(3, 2) // 1.00-5.00
  writingMotivationScore Decimal? @map("writing_motivation_score") @db.Decimal(3, 2)
  readingEnvironmentScore Decimal? @map("reading_environment_score") @db.Decimal(3, 2)
  readingHabitScore      Decimal? @map("reading_habit_score") @db.Decimal(3, 2)
  readingPreferenceData  Json?    @map("reading_preference_data") @db.JsonB // 선호 장르 분석
  strengths              Json?    @db.JsonB // 강점 분석
  weaknesses             Json?    @db.JsonB // 약점 분석
  recommendations        Json?    @db.JsonB // 학습 제안
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  session TestSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("test_results")
}

// ===== Statistics Cache =====

model Statistic {
  id            String       @id @default(uuid()) @db.Uuid
  grade         Int          @db.Integer
  templateId    String?      @map("template_id") @db.Uuid
  avgScore      Decimal?     @map("avg_score") @db.Decimal(5, 2)
  stdDeviation  Decimal?     @map("std_deviation") @db.Decimal(5, 2)
  sampleSize    Int?         @map("sample_size") @db.Integer
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  template TestTemplate? @relation(fields: [templateId], references: [id])

  @@index([grade, templateId])
  @@map("statistics")
}

// ===== Peer Statistics (또래 평균) =====

model PeerStatistics {
  id                      String   @id @default(uuid()) @db.Uuid
  grade                   Int      @db.Integer // 1-9
  category                QuestionCategory

  // 평균 점수 (실제 데이터 + 시뮬레이션)
  avgScore                Decimal  @map("avg_score") @db.Decimal(5, 2)
  avgPercentage           Decimal  @map("avg_percentage") @db.Decimal(5, 2)

  // 통계 정보
  stdDeviation            Decimal  @map("std_deviation") @db.Decimal(5, 2)
  sampleSize              Int      @map("sample_size") @db.Integer
  simulatedSampleSize     Int      @default(0) @map("simulated_sample_size") @db.Integer

  // 백분위 분포 (JSON: {p10: 45, p25: 60, p50: 75, p75: 85, p90: 95})
  percentileDistribution  Json     @map("percentile_distribution") @db.JsonB

  // 메타데이터
  lastUpdated             DateTime @updatedAt @map("last_updated")
  createdAt               DateTime @default(now()) @map("created_at")

  @@unique([grade, category])
  @@index([grade])
  @@map("peer_statistics")
}

// ===== Additional System Tables =====

// Refresh Tokens for JWT
model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

// Audit Log for security
model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  action    String   @db.VarChar(100)
  entity    String   @db.VarChar(100)
  entityId  String?  @map("entity_id") @db.Uuid
  changes   Json?    @db.JsonB
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ===== Vision TEST Models =====

// Vision TEST Session (1:1 with TestSession)
model VisionTestSession {
  id                String   @id @default(uuid()) @db.Uuid
  sessionId         String   @unique @map("session_id") @db.Uuid
  calibrationId     String?  @map("calibration_id") @db.Uuid
  calibrationScore  Float?   @map("calibration_score") @db.DoublePrecision
  aiAnalysis        Json?    @map("ai_analysis") @db.JsonB
  readingStrategy   String?  @map("reading_strategy") @db.VarChar(50)
  heatmapData       Json?    @map("heatmap_data") @db.JsonB
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  session      TestSession                   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  calibration  VisionCalibration?            @relation(fields: [calibrationId], references: [id])
  gazeData     VisionGazeData[]
  metrics      VisionMetrics?
  adjustments  VisionCalibrationAdjustment[]

  @@index([sessionId])
  @@index([calibrationId])
  @@map("vision_test_sessions")
}

// Vision Gaze Data (Large array storage)
model VisionGazeData {
  id                String   @id @default(uuid()) @db.Uuid
  visionSessionId   String   @map("vision_session_id") @db.Uuid
  passageId         String   @map("passage_id") @db.VarChar(100)
  gazePoints        Json     @map("gaze_points") @db.JsonB // [{ timestamp, x, y, confidence, type }, ...]
  totalPoints       Int      @map("total_points") @db.Integer
  startTime         DateTime @map("start_time")
  endTime           DateTime @map("end_time")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  visionSession VisionTestSession @relation(fields: [visionSessionId], references: [id], onDelete: Cascade)

  @@index([visionSessionId])
  @@index([passageId])
  @@map("vision_gaze_data")
}

// Vision Metrics (15 calculated metrics)
model VisionMetrics {
  id                            String   @id @default(uuid()) @db.Uuid
  visionSessionId               String   @unique @map("vision_session_id") @db.Uuid

  // A. Eye Movement Patterns (6 metrics)
  averageSaccadeAmplitude       Float    @map("average_saccade_amplitude") @db.DoublePrecision
  saccadeVariability            Float    @map("saccade_variability") @db.DoublePrecision
  averageSaccadeVelocity        Float    @map("average_saccade_velocity") @db.DoublePrecision
  optimalLandingRate            Float    @map("optimal_landing_rate") @db.DoublePrecision
  returnSweepAccuracy           Float    @map("return_sweep_accuracy") @db.DoublePrecision
  scanPathEfficiency            Float    @map("scan_path_efficiency") @db.DoublePrecision

  // B. Fixation Behavior (4 metrics)
  averageFixationDuration       Float    @map("average_fixation_duration") @db.DoublePrecision
  fixationsPerWord              Float    @map("fixations_per_word") @db.DoublePrecision
  regressionRate                Float    @map("regression_rate") @db.DoublePrecision
  vocabularyGapScore            Float    @map("vocabulary_gap_score") @db.DoublePrecision

  // C. Reading Speed & Rhythm (3 metrics)
  wordsPerMinute                Float    @map("words_per_minute") @db.DoublePrecision
  rhythmRegularity              Float    @map("rhythm_regularity") @db.DoublePrecision
  staminaScore                  Float    @map("stamina_score") @db.DoublePrecision

  // D. Comprehension & Cognitive (2 metrics)
  gazeComprehensionCorrelation  Float    @map("gaze_comprehension_correlation") @db.DoublePrecision
  cognitiveLoadIndex            Float    @map("cognitive_load_index") @db.DoublePrecision

  // Overall Score
  overallEyeTrackingScore       Float    @map("overall_eye_tracking_score") @db.DoublePrecision

  // Additional Analysis Data
  detailedAnalysis              Json?    @map("detailed_analysis") @db.JsonB
  comparisonWithPeers           Json?    @map("comparison_with_peers") @db.JsonB

  createdAt                     DateTime @default(now()) @map("created_at")

  // Relations
  visionSession VisionTestSession @relation(fields: [visionSessionId], references: [id], onDelete: Cascade)

  @@index([visionSessionId])
  @@map("vision_metrics")
}

// Vision Calibration (Reusable calibration data)
model VisionCalibration {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  calibrationPoints Json     @map("calibration_points") @db.JsonB // 9 points with errors
  overallAccuracy   Float    @map("overall_accuracy") @db.DoublePrecision
  transformMatrix   Json     @map("transform_matrix") @db.JsonB
  deviceInfo        Json?    @map("device_info") @db.JsonB
  expiresAt         DateTime @map("expires_at") // 7 days validity
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  visionSessions   VisionTestSession[]

  @@index([userId])
  @@index([expiresAt])
  @@map("vision_calibrations")
}

// Vision Calibration Adjustment (Manual correction history)
model VisionCalibrationAdjustment {
  id                String   @id @default(uuid()) @db.Uuid
  visionSessionId   String   @map("vision_session_id") @db.Uuid
  adminId           String   @map("admin_id") @db.Uuid
  adjustments       Json     @map("adjustments") @db.JsonB // { offsetX, offsetY, scaleX, scaleY, rotation }
  improvementScore  Float?   @map("improvement_score") @db.DoublePrecision
  notes             String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  visionSession VisionTestSession @relation(fields: [visionSessionId], references: [id], onDelete: Cascade)
  admin         User              @relation(fields: [adminId], references: [id])

  @@index([visionSessionId])
  @@index([adminId])
  @@map("vision_calibration_adjustments")
}
